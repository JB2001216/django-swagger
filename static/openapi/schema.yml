swagger: "2.0"
info:
  description: This is the swagger file that goes with our server code
  version: "1.0.0"
  title: Django REST API
consumes:
  - application/json
produces:
  - application/json

basePath: /api/v1

# Paths supported by the server application
paths:
  /api/v1/auth/login:
    post:
      operationId: user.login
      tags:
        - Authentication
      summary: Acces for user
      description: User login for authencation
      parameters:
        - name: user
          in: body
          description: user login
          required: True
          schema:
            type: object
            properties:
              username:
                type: string
                description: First name of person to create
              password:
                type: string
                description: Last name of person to create
      responses:
        200:
          description: Successfully login
          schema:
            type: object
            properties:
              status:
                type: string
                example: '200'
              token:
                type: string
                example: "token"
        403:
          description: Invalid credentials
          schema:
            type: object
            properties:
              status:
                type: array
                items:
                  type: object
                  example: '403'
              message :
                type: array
                items:
                  type: object
                  example: 'Unable to login with given credentials.'



  /api/v1/auth/logout:
    get:
      operationId: user.logout
      tags:
        - Authentication
      summary: User Logout
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: token.
      responses:
        200:
          description: Logout successfully
        401:
          description: Failed to logout

  /api/v1/auth/user:
    get:
      operationId: auth.user
      tags:
        - Authentication
      summary: Auth user information
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: token.
      responses:
        200:
          description: Get auth user obejct
          schema:
            $ref: '#/definitions/UserById'


  /api/v1/auth/user/list:
    get:
      operationId: user.list
      tags:
        - User
      summary: Get user list
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: token.
      responses:
        200:
          description: Get auth user obejct
          schema:
            $ref: '#/definitions/Users'

  /api/v1/auth/registration:
    post:
      operationId: user.create
      tags:
        - User
      summary: User Create
      description: User registration in this system
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: '#/definitions/UserCreate'
      responses:
        200:
          description: OK

  /api/v1/auth/<int:id>/user:
    get:
      operationId: user.byId
      tags:
        - User
      summary: Get user by id
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: token.
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/UserById'
        404:
          description: User not found

  /api/v1/auth/<int:pk>/user:
    delete:
      operationId: user.delete
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: token.
      tags:
        - User
      summary: User Delete
      responses:
        200:
          description: Ok
          schema:
            type: object
            properties:
              status:
                type: string
                example: "200"
              message:
                type: string
                example: "Deleting successfully"

        404:
          description: Not Found
          schema:
            type: object
            properties:
              error:
                type: string
                example: "User object not found."
              status:
                type: string
                example: "404"
        406:
          description: Not accepted
          schema:
            type: object
            properties:
              status:
                type: string
                example: "406"
              message:
                type: string
                example: "You are logged in, so you cannot delete your own details!"
  /api/v1/auth/<int:userID>/user:
    put:
      tags:
        - User
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: token.
        - in: body
          required: true
          name: body
          schema:
            type: object
            properties:
              first_name:
                type: string
                example: Test
              last_name:
                type: string
                example: Test
              email:
                type: string
                example: 'test@test.com'
      summary: Update user profile information by admin
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/UserUpdate'
        406:
          description: Not Acceptable
          schema:
            type: object
            properties:
              status:
                type: string
                example: 406
              error:
                type: string
                example: "Failed to update user profile information"
        404:
          description: Not found
          schema:
            type: object
            properties:
              status:
                type: string
                example: 404
              error:
                type: string
                example: "User object not found."



definitions:
  Users:
    type: object
    properties:
      status:
        type: string
        example: 200
      users:
        type: array
        items:
          $ref: '#/definitions/UserList'

  UserList:
    type: object
    properties:
      id:
        type: integer
        example: 1
      username:
        type: string
        example: 'username'
      email:
        type: string
        example: 'admin@example.com'
      first_name:
        type: string
        example: 'first name'
      last_Name:
        type: string
        example: 'last name'

  UserCreate:
    type: object
    properties:
      username:
        type: string
        example: username
      email:
        type: string
        example: 'a@a.com'
      password:
        type: string
        example: "123456"
      first_name:
        type: string
        example: 'a'
      last_name:
        type: string
        example: 'a'
      is_superuser:
        type: boolean
        example: false
  UserById:
    properties:
      status:
        type: string
        example: 200
      user:
        type: object
        properties:
          id:
            type: integer
            example: 1
          username:
            type: string
            example: 'username'
          email:
            type: string
            example: 'admin@example.com'
          first_name:
            type: string
            example: 'first name'
          last_Name:
            type: string
            example: 'last name'
  UserUpdate:
    properties:
      user:
        type: object
        properties:
          id:
            type: integer
            example: 1
          username:
            type: string
            example: 'test'
          email:
            type: string
            example: 'admin@example.com'
          first_name:
            type: string
            example: 'first name'
          last_Name:
            type: string
            example: 'last name'
      status:
        type: string
        example: 200
      message:
        type: string
        example: "User profile updated successfully!"